<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="
     	http://www.springframework.org/schema/beans 
     	http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">
        
<!--    通知执行优先级：
	before			aspectJ beforeAdvice-jp: execution(void spring.aop.aspectJ.xml.DAO.testDAO.doSome())
	afterThrowing	(错误时执行)			
					doSome
	after			after(一定执行)
	around			around
	afterReturn		aspectJ afterReturn -->

	<!-- 注册代理目标对象 -->
    <bean name="testSchool" class="spring.aop.aspectJ.xml.bean.School">
		<property name="name" value="GDOU"/>
	</bean>
	
	<bean name="testImpl" class="spring.aop.aspectJ.xml.bean.testImpl">
		<property name="name" value="Chuck Lin "/>
		<property name="age" value="22"/>
		<property name="school" ref="testSchool"/>
	</bean>
	
	<!-- 注册切面：通知 -->
	<bean id="aspectJXmlTest" class="spring.aop.aspectJ.xml.bean.aspectJXml"/>
	
	<aop:config>
		<aop:pointcut expression="execution(* *..testDAO.*(..))" id="myPointcut"/>
		<aop:aspect ref="aspectJXmlTest">
			<aop:before method="beforeAdvice" pointcut-ref="myPointcut"/>
			<aop:before method="beforeAdvice(org.aspectj.lang.JoinPoint)" pointcut-ref="myPointcut"/>
			<aop:after-returning method="afterReturn" pointcut-ref="myPointcut"/>
			<aop:around method="around" pointcut-ref="myPointcut"/>
			<aop:after method="after" pointcut-ref="myPointcut"/>
			<aop:after-throwing method="afterThrowing" pointcut-ref="myPointcut"/>
			<aop:after-throwing method="afterThrowing(java.lang.Exception)" pointcut-ref="myPointcut" throwing="ex"/>
		</aop:aspect>
	</aop:config>
	
</beans>